# -*- coding: utf-8 -*-
"""Another copy of Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16aXJb8IZOY9g3569UtXn7hW6hV32atQF

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** Haniza Kurnia Dwi Putri
- **Email:** m284b4kx1718@bangkit.academy
- **ID Dicoding:** haniza_kurnia_dwi_putri_XIoj

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1
- Pertanyaan 2

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

day_df = pd.read_csv('bike-sharing-dataset/day.csv')
day_df.head()

hour_df = pd.read_csv('bike-sharing-dataset/hour.csv')
hour_df.head()

"""### Assessing Data

**Melihat Informasi dari Dataset** `day_df`
"""

day_df.info()

"""**Melihat apakah ada nilai yang hilang atau kosong pada dataset** `day_df`"""

print(day_df.isnull().sum())

"""**Melihat apakah ada data duplikat dalam dataset** `day_df`"""

day_duplicates = day_df.duplicated().sum()
print(f"Jumlah duplikat pada dataset harian: {day_duplicates}")

"""**Melihat informasi pada dataset** `hour_df`"""

hour_df.info()

"""**Melihat apakah ada nilai yang kosong atau hilang dari dataset** `hour_df`"""

print(hour_df.isnull().sum())

"""**Melihat apakah ada data duplikat dalam dataset** `hour_df`"""

hour_duplicates = hour_df.duplicated().sum()
print(f"Jumlah duplikat pada dataset jam: {hour_duplicates}")

"""### Cleaning Data

**Mengubah kolom `'dteday'` menjadi tipe datetime pada dataset** `day_df`
"""

day_df['dteday'] = pd.to_datetime(day_df['dteday'])

"""**Mengonfirmasi perubahan tipe data pada kolom** `'dteday'` **pada dataset** `day_df`"""

day_df.info()

"""**Mengubah kolom `'dteday'` menjadi tipe datetime pada dataset** `hour_df`"""

hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])

"""**Mengonfirmasi perubahan tipe data pada kolom** `'dteday'` **pada dataset** `hour_df`"""

hour_df.info()

"""## Exploratory Data Analysis (EDA)

**Melihat statistik deskriptif untuk dataset** `day_df`
"""

print(day_df.describe())

"""**Melihat statistik descriptive untuk dataset** `hour_df`"""

print(hour_df.describe())

"""**Mengelompokkan berdasarkan musim dan menghitung statistik untuk peminjaman sepeda**"""

season_stats = day_df.groupby(by="season").agg({
    "cnt": ["max", "min", "mean", "std"]
})
print(season_stats)

"""**Menggabungkan dataset** `day_df` **dan** `hour_df`"""

merged_df = pd.merge(
    left=day_df,
    right=hour_df,
    how="left",
    left_on="instant",
    right_on="instant"
)
merged_df.head()

"""## Visualization & Explanatory Analysis

### Pertanyaan 1:

**Bagaimana pengaruh kondisi cuaca terhadap jumlah peminjaman sepeda (baik oleh pengguna kasual maupun terdaftar)?**
"""

day_df.head()

# Mengelompokkan data berdasarkan kondisi cuaca untuk menghitung total peminjaman
weather_data = day_df.groupby('weathersit').agg({
    'cnt': 'sum',
    'casual': 'sum',
    'registered': 'sum'
}).reset_index()

# Mengatur label kondisi cuaca
weather_data['weathersit'] = weather_data['weathersit'].map({
    1: 'Cerah',
    2: 'Kabut',
    3: 'Hujan Ringan/Salju',
    4: 'Hujan Lebat'
})

# Visualisasi menggunakan bar plot
plt.figure(figsize=(12, 6))
bar_width = 0.35
x = np.arange(len(weather_data['weathersit']))

# Menambahkan total peminjaman, kasual, dan terdaftar ke plot
plt.bar(x - bar_width/2, weather_data['cnt'], width=bar_width, label='Total Peminjaman', color='skyblue')
plt.bar(x + bar_width/2, weather_data['casual'], width=bar_width, label='Pengguna Kasual', color='orange')
plt.bar(x + 1.5*bar_width, weather_data['registered'], width=bar_width, label='Pengguna Terdaftar', color='green')

# Mengatur label dan judul
plt.xticks(x, weather_data['weathersit'])
plt.title('Pengaruh Kondisi Cuaca terhadap Jumlah Peminjaman Sepeda')
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Jumlah Peminjaman')
plt.legend()
plt.show()

"""### Pertanyaan 2:

**Bagaimana tren peminjaman sepeda bervariasi berdasarkan jam dalam sehari, dan apakah ada perbedaan antara hari kerja dan akhir pekan?**
"""

day_df.head()

# Import library yang diperlukan
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set style untuk visualisasi yang lebih baik
plt.style.use('seaborn')
sns.set_palette("husl")

# Asumsikan hour_df sudah ada
# Sebelum membuat plot, kita perlu memastikan data workingday sudah benar
# Mengubah nilai workingday menjadi kategorikal yang lebih deskriptif
hour_df['workingday'] = hour_df['workingday'].map({0: 'Akhir Pekan', 1: 'Hari Kerja'})

# Mengelompokkan data berdasarkan jam dan hari kerja
hour_avg = hour_df.groupby(['hr', 'workingday'])['cnt'].mean().reset_index()

# Membuat plot
plt.figure(figsize=(15, 8))
sns.lineplot(
    data=hour_avg,
    x='hr',
    y='cnt',
    hue='workingday',
    marker='o',
    markersize=8,
    linewidth=2
)

# Memperbaiki tampilan plot
plt.title('Tren Peminjaman Sepeda: Hari Kerja vs Akhir Pekan', fontsize=16, pad=20)
plt.xlabel('Jam dalam Sehari', fontsize=12, labelpad=10)
plt.ylabel('Rata-rata Jumlah Peminjaman', fontsize=12, labelpad=10)

# Mengatur ticks pada sumbu x
plt.xticks(range(0, 24), fontsize=10)
plt.yticks(fontsize=10)

# Memperbaiki legend
plt.legend(
    title='Tipe Hari',
    fontsize=10,
    title_fontsize=12
)

# Menambahkan grid untuk memudahkan pembacaan
plt.grid(True, linestyle='--', alpha=0.7)

# Mengatur layout agar tidak terpotong
plt.tight_layout()

# Menampilkan plot
plt.show()

# Untuk memverifikasi data, mari tampilkan beberapa baris dari hour_avg
print("\nSampel data yang digunakan dalam plot:")
print(hour_avg.head())

# Menampilkan nilai unik dalam kolom workingday
print("\nNilai unik dalam kolom workingday:")
print(hour_avg['workingday'].unique())

"""## Conclusion

- Conclution pertanyaan 1
- Conclution pertanyaan 2
"""